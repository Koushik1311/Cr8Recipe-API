generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime @default(now()) @db.Date
  updatedAt    DateTime @updatedAt @db.Date
  email        String   @unique
  password     String
  refreshToken String?
  recipes      Recipe[]
  Reviews      Reviews?
}

// CuisineType model
model CuisineType {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime            @default(now()) @db.Date
  updatedAt         DateTime            @updatedAt @db.Date
  name              String              @unique
  CuisineTypeRecipe CuisineTypeRecipe[]
}

// DietaryRestriction model
model DietaryRestriction {
  id                       String                     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt                DateTime                   @default(now()) @db.Date
  updatedAt                DateTime                   @updatedAt @db.Date
  name                     String                     @unique
  DietaryRestrictionRecipe DietaryRestrictionRecipe[]
}

// MealType model 
model MealType {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime         @default(now()) @db.Date
  updatedAt      DateTime         @updatedAt @db.Date
  name           String           @unique
  MealTypeRecipe MealTypeRecipe[]
}

// SeasonalOccasion model
model SeasonalOccasion {
  id                     String                   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt              DateTime                 @default(now()) @db.Date
  updatedAt              DateTime                 @updatedAt @db.Date
  name                   String                   @unique
  SeasonalOccasionRecipe SeasonalOccasionRecipe[]
}

// Ingredient model
model Ingredient {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime           @default(now()) @db.Date
  updatedAt         DateTime           @updatedAt @db.Date
  name              String             @unique
  recipeingredients RecipeIngredient[]
}

// Instruction model
model Instruction {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @db.Date
  updatedAt DateTime @updatedAt @db.Date
  content   String
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  recipeId  String   @unique @db.ObjectId
}

// Reviews model
model Reviews {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @db.Date
  updatedAt DateTime @updatedAt @db.Date
  comment   String
  rating    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @db.ObjectId
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  recipeId  String   @db.ObjectId
}

// Recipe model
model Recipe {
  id                       String                     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt                DateTime                   @default(now()) @db.Date
  updatedAt                DateTime                   @updatedAt @db.Date
  name                     String
  slag                     String                     @unique
  author                   User                       @relation(fields: [userId], references: [id])
  description              String?
  cookingTime              Float?
  imageUrl                 String?
  userId                   String                     @db.ObjectId
  instruction              Instruction?
  recipeingredients        RecipeIngredient[]
  CuisineTypeRecipe        CuisineTypeRecipe[]
  DietaryRestrictionRecipe DietaryRestrictionRecipe[]
  MealTypeRecipe           MealTypeRecipe[]
  SeasonalOccasionRecipe   SeasonalOccasionRecipe[]
  Reviews                  Reviews[]
}

// Many-to-Many model for Recipe & Ingredient
model RecipeIngredient {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime   @default(now()) @db.Date
  updatedAt    DateTime   @updatedAt @db.Date
  quantity     Float
  unit         String
  recipes      Recipe     @relation(fields: [recipeId], references: [id])
  ingredients  Ingredient @relation(fields: [ingredientId], references: [id])
  recipeId     String     @db.ObjectId
  ingredientId String     @db.ObjectId
}

// Many-to-Many model for CuisineType & Recipe
model CuisineTypeRecipe {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  cuisineTypeId String      @db.ObjectId
  cuisineType   CuisineType @relation(fields: [cuisineTypeId], references: [id])

  recipeId String @db.ObjectId
  recipe   Recipe @relation(fields: [recipeId], references: [id])

  @@unique([cuisineTypeId, recipeId])
}

// Many-to-Many model for DietaryRestriction & Recipe
model DietaryRestrictionRecipe {
  id                   String             @id @default(auto()) @map("_id") @db.ObjectId
  dietaryRestrictionId String             @db.ObjectId
  dietaryRestriction   DietaryRestriction @relation(fields: [dietaryRestrictionId], references: [id])

  recipeId String @db.ObjectId
  recipe   Recipe @relation(fields: [recipeId], references: [id])

  @@unique([dietaryRestrictionId, recipeId])
}

// Many-to-Many model for MealType & Recipe
model MealTypeRecipe {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  mealTypeId String   @db.ObjectId
  mealType   MealType @relation(fields: [mealTypeId], references: [id])

  recipeId String @db.ObjectId
  recipe   Recipe @relation(fields: [recipeId], references: [id])

  @@unique([mealTypeId, recipeId])
}

// Many-to-Many model for SeasonalOccasion & Recipe
model SeasonalOccasionRecipe {
  id                 String           @id @default(auto()) @map("_id") @db.ObjectId
  seasonalOccasionId String           @db.ObjectId
  seasonalOccasion   SeasonalOccasion @relation(fields: [seasonalOccasionId], references: [id])

  recipeId String @db.ObjectId
  recipe   Recipe @relation(fields: [recipeId], references: [id])

  @@unique([seasonalOccasionId, recipeId])
}

// TODO: Nutrition & Calories model
